---
- name: Gather installed package facts
  ansible.builtin.package_facts:

- name: Debug current OpenSSL package info
  ansible.builtin.debug:
    msg: "Current OpenSSL packages: {{ ansible_facts.packages.get('openssl', 'Not installed') }}"

- name: Check current OpenSSL version
  ansible.builtin.command: openssl version
  register: current_openssl_version
  changed_when: false
  failed_when: false

- name: Print current OpenSSL version
  ansible.builtin.debug:
    msg: "Current OpenSSL version: {{ current_openssl_version.stdout | default('Not found') }}"

- name: Install specific version of openssl if not installed
  ansible.builtin.dnf:
    name: "openssl-{{ install_openssl_old_version_openssl_version }}"
    state: present
  when: "'openssl' not in ansible_facts.packages"

- name: Check if downgrade is needed
  ansible.builtin.set_fact:
    need_downgrade: >-
      {{
        'openssl' in ansible_facts.packages and
        ansible_facts.packages['openssl'][0].version != install_openssl_old_version_openssl_version
      }}

- name: Print downgrade decision
  ansible.builtin.debug:
    msg: |
      Need downgrade: {{ need_downgrade }}
      Current version: {{ ansible_facts.packages.get('openssl', [{'version': 'N/A'}])[0].version }}
      Target version: {{ install_openssl_old_version_openssl_version }}

- name: Remove current OpenSSL if downgrade needed
  ansible.builtin.dnf:
    name: openssl
    state: absent
  when: need_downgrade | bool

- name: Install specific OpenSSL version after removal
  ansible.builtin.dnf:
    name: "openssl-{{ install_openssl_old_version_openssl_version }}"
    state: present
    allow_downgrade: true
  when: need_downgrade | bool

- name: Verify final installed openssl version
  ansible.builtin.command: openssl version
  register: final_openssl_version
  changed_when: false

- name: Print final openssl version output
  ansible.builtin.debug:
    msg: "Final OpenSSL version: {{ final_openssl_version.stdout }}"

- name: Extract and store version number
  ansible.builtin.set_fact:
    openssl_installed_version: "{{ final_openssl_version.stdout.split(' ')[1] }}"

- name: Print extracted version
  ansible.builtin.debug:
    msg: "Extracted version: {{ openssl_installed_version }}"