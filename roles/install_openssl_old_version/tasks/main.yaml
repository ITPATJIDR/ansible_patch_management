---
- name: Gather installed package facts
  ansible.builtin.package_facts:

- name: Debug current OpenSSL package info
  ansible.builtin.debug:
    msg: "Current OpenSSL packages: {{ ansible_facts.packages.get('openssl', 'Not installed') }}"

- name: Check current OpenSSL version
  ansible.builtin.command: openssl version
  register: current_openssl_version
  changed_when: false
  failed_when: false

- name: Print current OpenSSL version
  ansible.builtin.debug:
    msg: "Current OpenSSL version: {{ current_openssl_version.stdout | default('Not found') }}"

- name: Check available OpenSSL versions
  ansible.builtin.command: dnf list --showduplicates openssl
  register: available_openssl_versions
  changed_when: false
  failed_when: false

- name: Print available OpenSSL versions
  ansible.builtin.debug:
    msg: "Available OpenSSL versions: {{ available_openssl_versions.stdout_lines }}"

- name: Extract current version from package facts
  ansible.builtin.set_fact:
    current_package_version: "{{ ansible_facts.packages.get('openssl', [{'version': 'N/A'}])[0].version }}"

- name: Check if target version is available
  ansible.builtin.shell: |
    dnf list --showduplicates openssl | grep -i "{{ target_openssl_version }}" || echo "not_found"
  register: version_check
  changed_when: false

- name: Print version availability check
  ansible.builtin.debug:
    msg: "Target version {{ target_openssl_version }} availability: {{ version_check.stdout }}"

- name: Install specific version of openssl if not installed
  ansible.builtin.dnf:
    name: "openssl-{{ target_openssl_version }}"
    state: present
  when: "'openssl' not in ansible_facts.packages"

- name: Check if downgrade is needed
  ansible.builtin.set_fact:
    need_downgrade: >-
      {{
        'openssl' in ansible_facts.packages and
        not (current_package_version is search(target_openssl_version.split('-')[0]))
      }}

- name: Print downgrade decision
  ansible.builtin.debug:
    msg: |
      Need downgrade: {{ need_downgrade }}
      Current package version: {{ current_package_version }}
      Target version: {{ target_openssl_version }}

- name: Create backup of current OpenSSL configuration
  ansible.builtin.copy:
    src: /etc/ssl/
    dest: /etc/ssl.backup/
    remote_src: true
  when: need_downgrade | bool

- name: Downgrade openssl to target version if needed
  ansible.builtin.dnf:
    name: 
      - "openssl-{{ target_openssl_version }}"
      - "openssl-libs-{{ target_openssl_version }}"
    state: present
    allow_downgrade: true
  when: need_downgrade | bool

- name: Install specific OpenSSL version with libs
  ansible.builtin.dnf:
    name: 
      - "openssl-{{ target_openssl_version }}"
      - "openssl-libs-{{ target_openssl_version }}"
    state: present
    allow_downgrade: true
  when: need_downgrade | bool
  ignore_errors: true

- name: Alternative Try installing without libs if above fails
  ansible.builtin.dnf:
    name: "openssl-{{ target_openssl_version }}"
    state: present
    allow_downgrade: true
  when: need_downgrade | bool
  ignore_errors: true

- name: Verify final installed openssl version
  ansible.builtin.command: openssl version
  register: final_openssl_version
  changed_when: false

- name: Print final openssl version output
  ansible.builtin.debug:
    msg: "Final OpenSSL version: {{ final_openssl_version.stdout }}"

- name: Extract and store version number
  ansible.builtin.set_fact:
    openssl_installed_version: "{{ final_openssl_version.stdout.split(' ')[1] }}"

- name: Print extracted version
  ansible.builtin.debug:
    msg: "Extracted version: {{ openssl_installed_version }}"

- name: Verify if target version was achieved
  ansible.builtin.set_fact:
    downgrade_successful: "{{ openssl_installed_version is search(target_openssl_version.split('-')[0]) }}"

- name: Print final status
  ansible.builtin.debug:
    msg: |
      Downgrade successful: {{ downgrade_successful }}
      Target was: {{ openssl_installed_version }}
      Achieved: {{ openssl_installed_version }}
