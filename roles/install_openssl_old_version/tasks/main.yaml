---
- name: Gather installed package facts
  ansible.builtin.package_facts:

- name: Debug current OpenSSL package info
  ansible.builtin.debug:
    msg: "Current OpenSSL packages: {{ ansible_facts.packages.get('openssl', 'Not installed') }}"

- name: Check current OpenSSL version
  ansible.builtin.command: openssl version
  register: current_openssl_version
  changed_when: false
  failed_when: false

- name: Print current OpenSSL version
  ansible.builtin.debug:
    msg: "Current OpenSSL version: {{ current_openssl_version.stdout | default('Not found') }}"

- name: Check available OpenSSL versions
  ansible.builtin.command: dnf list --showduplicates openssl
  register: available_openssl_versions
  changed_when: false
  failed_when: false

- name: Check if target version is available in available_openssl_versions
  ansible.builtin.set_fact:
    install_openssl_old_version_target_version_available: >-
      {{
        install_openssl_old_version_target_version in (available_openssl_versions.stdout | default(''))
      }}

- name: Print available OpenSSL versions
  ansible.builtin.debug:
    msg: "Available OpenSSL versions: {{ available_openssl_versions.stdout_lines }}"

- name: Extract current version from package facts
  ansible.builtin.set_fact:
    install_openssl_old_version_current_package_version: "{{ ansible_facts.packages.get('openssl', [{'version': 'N/A'}])[0].version }}"

- name: Check if target version is available
  ansible.builtin.shell: |
    set -o pipefail
    dnf list --showduplicates openssl | grep -i "{{ install_openssl_old_version_target_version }}"
  register: version_check
  changed_when: false
  failed_when: version_check.rc != 0

- name: Print version availability check
  ansible.builtin.debug:
    msg: "Target version {{ install_openssl_old_version_target_version }} availability: {{ version_check.stdout }}"

- name: Install specific version of openssl if not installed
  ansible.builtin.dnf:
    name: "openssl-{{ install_openssl_old_version_target_version }}"
    state: present
  when: "'openssl' not in ansible_facts.packages"

- name: Check if downgrade is needed
  ansible.builtin.set_fact:
    install_openssl_old_version_need_downgrade: >-
      {{
        'openssl' in ansible_facts.packages and
        not (install_openssl_old_version_current_package_version is search(install_openssl_old_version_target_version.split('-')[0]))
      }}

- name: Print downgrade decision
  ansible.builtin.debug:
    msg: |
      Need downgrade: {{ install_openssl_old_version_need_downgrade }}
      Current package version: {{ install_openssl_old_version_current_package_version }}
      Target version: {{ install_openssl_old_version_target_version }}

- name: Downgrade openssl to target version with libs if needed
  ansible.builtin.dnf:
    name:
      - "openssl-{{ install_openssl_old_version_target_version }}"
      - "openssl-libs-{{ install_openssl_old_version_target_version }}"
    state: present
    allow_downgrade: true
  when: install_openssl_old_version_need_downgrade | bool
  register: downgrade_with_libs
  failed_when: downgrade_with_libs.failed and 'No package' not in downgrade_with_libs.msg | default('')

- name: Alternative try installing without libs if above fails
  ansible.builtin.dnf:
    name: "openssl-{{ install_openssl_old_version_target_version }}"
    state: present
    allow_downgrade: true
  when: install_openssl_old_version_need_downgrade | bool and downgrade_with_libs.failed
  register: downgrade_without_libs
  failed_when: downgrade_without_libs.failed and 'No package' not in downgrade_without_libs.msg | default('')

- name: Verify final installed openssl version
  ansible.builtin.command: openssl version
  register: final_openssl_version
  changed_when: false

- name: Print final openssl version output
  ansible.builtin.debug:
    msg: "Final OpenSSL version: {{ final_openssl_version.stdout }}"

- name: Extract and store version number
  ansible.builtin.set_fact:
    install_openssl_old_version_installed_version: "{{ final_openssl_version.stdout.split(' ')[1] }}"

- name: Print extracted version
  ansible.builtin.debug:
    msg: "Extracted version: {{ install_openssl_old_version_installed_version }}"

- name: Verify if target version was achieved
  ansible.builtin.set_fact:
    install_openssl_old_version_downgrade_successful: "{{ install_openssl_old_version_installed_version is search(install_openssl_old_version_target_version.split('-')[0]) }}"

- name: Print final status
  ansible.builtin.debug:
    msg: |
      Downgrade successful: {{ install_openssl_old_version_downgrade_successful }}
      Target was: {{ install_openssl_old_version_target_version }}
      Achieved: {{ install_openssl_old_version_installed_version }}
